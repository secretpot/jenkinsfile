@Library('sharelib@main') _

pipeline {
    agent {
        node {
            label 'go'
        }
    }
    parameters {
        string(name: 'BUILD_BRANCH', defaultValue: 'main', description: '请输入要的构建分支名')
        booleanParam(name: 'BUILD_CMD', defaultValue: false, description: '是否构建命令行工具')
        booleanParam(name: 'BUILD_SERVER', defaultValue: false, description: '是否构建服务端')
        booleanParam(name: 'TEST', defaultValue: false, description: '是否进行测试')
    }

    stages {
        stage('Check GO VERSION') {
            steps {
                script {
                    sh 'go version'
                }
            }
        }
        stage('Fetch code') {
            steps {
                when {
                    expression {
                        return params.BUILD_CMD || params.BUILD_SERVER
                    }
                }
                script {
                    new build.builderForGithub().fetchCode('secretpot', 'go-project-example', "${params.BUILD_BRANCH}")
                }
            }       
        }
        stage('Build') {
            parallel {
                stage('Build CMD') {
                    when {
                        expression {
                            return params.BUILD_CMD
                        }
                    }
                    sh "./scrpts/cmd_build.sh"
                }
                stage('BUILD SERVER') {
                    when {
                        expression {
                            return params.BUILD_SERVER
                        }
                    }
                    steps {
                        sh "./scrip/server_build.sh"
                    }
                }
            }
        }
        stage('Test') {
            when {
                expression {
                    return params.TEST
                }
            }
            steps {
                script {
                    sh "scrpts/cmd_test.sh"
                    sh "scrip/server_test.sh"
                }
            }
        }
    }
}
